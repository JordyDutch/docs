"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[8321],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>f});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function c(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),l=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=l(t.components);return n.createElement(s.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),m=l(a),f=r,k=m["".concat(s,".").concat(f)]||m[f]||d[f]||o;return a?n.createElement(k,i(i({ref:e},p),{},{components:a})):n.createElement(k,i({ref:e},p))}));function f(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,i=new Array(o);i[0]=m;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=t,c.mdxType="string"==typeof t?t:r,i[1]=c;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4267:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const o={toc:[]};function i(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},o,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Contract"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Interface ID"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"ERC165")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x01ffc9a7")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Standard Interface Detection.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"ERC1271")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x1626ba7e")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Standard Signature Validation Method for Contracts.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"ERC725X")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x7545acac")),(0,r.kt)("td",{parentName:"tr",align:"left"},"General executor.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"ERC725Y")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x629aa694")),(0,r.kt)("td",{parentName:"tr",align:"left"},"General Data key-value store.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP0ERC725Account")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x3e89ad98")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Interface of the LSP0 - ERC725Account standard, an account based smart contract that represents an identity on-chain.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP1UniversalReceiver")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x6bb56a14")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP6KeyManager")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x38bb3cdb")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Interface of the LSP6 - Key Manager standard, a contract acting as a controller of an ERC725 Account using predfined permissions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP7DigitalAsset")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0xda1f85e4")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Interface of the LSP7 - Digital Asset standard, a fungible digital asset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP8IdentifiableDigitalAsset")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x622e7a01")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP9Vault")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x28af17e6")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Interface of LSP9 - Vault standard, a blockchain vault that can hold assets and interact with other smart contracts.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP11BasicSocialRecovery")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x049a28f1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Interface of the LSP11 - Basic Social Recovery standard, a contract to recover access control into an account.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP14Ownable2Step")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x94be5999")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Interface of the LSP14 - Ownable 2-step standard, an extension of the ",(0,r.kt)("a",{parentName:"td",href:"https://eips.ethereum.org/EIPS/eip-173"},"EIP173")," (Ownable) standard with 2-step process to transfer or renounce ownership.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP17Extendable")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0xa918fa6b")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Module to add more functionalities to a contract using extensions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP17Extension")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0xcee78b40")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Module to create a contract that can act as an extension.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP20CallVerification")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x1a0eb6a5")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Implementation of a contract calling the verification functions according to LSP20 - Call Verification standard.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"LSP20CallVerifier")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"0x480c0ec2")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Interface for the LSP20 Call Verification standard, a set of functions intended to perform verifications on behalf of another contract.")))))}i.isMDXComponent=!0;const c={title:"Interfaces IDs",sidebar_position:2},s="Interfaces IDs",l={unversionedId:"contracts/interface-ids",id:"contracts/interface-ids",title:"Interfaces IDs",description:"Interface IDs are not the most secure way to ensure that a contract implements a specific set of functions, as they are manually set and can be set to any value.",source:"@site/docs/contracts/interface-ids.md",sourceDirName:"contracts",slug:"/contracts/interface-ids",permalink:"/contracts/interface-ids",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/contracts/interface-ids.md",tags:[],version:"current",lastUpdatedAt:1687435518,formattedLastUpdatedAt:"Jun 22, 2023",sidebarPosition:2,frontMatter:{title:"Interfaces IDs",sidebar_position:2},sidebar:"contractsSidebar",previous:{title:"Introduction",permalink:"/contracts/introduction"}},p={},d=[],m={toc:d};function f(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interfaces-ids"},"Interfaces IDs"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Interface IDs are not the most secure way to ensure that a contract implements a specific set of functions, as they are manually set and can be set to any value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Interfaces IDs")," help check if a contract supports a specific interface, e.g., its meta-interface. They are helpful if we want to interact with a contract but don't know if it supports an interface such as ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-725.md#erc725y"},"ERC725Y")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-1-UniversalReceiver.md"},"LSP1UniversalReceiver")),", etc."),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"supportsInterface")," function from the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://eips.ethereum.org/EIPS/eip-165"},"ERC165"))," standard returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the standard is supported, ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)("p",null,"The interface IDs of each LSP standards can be easily imported in your code from the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@lukso/lsp-smart-contracts"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")," NPM package"),". They are accessible as follow:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { INTERFACE_IDS } from '@lukso/lsp-smart-contracts';\n\nconst LSP0_INTERFACE_ID = INTERFACE_IDS.LSP0ERC725Account;\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Note on importing ",(0,r.kt)("code",null,"INTERFACE_IDS")," in Hardhat Typescript projects"),(0,r.kt)("p",null,"If you are trying to import the ",(0,r.kt)("inlineCode",{parentName:"p"},"INTERFACE_IDS")," within a Hardhat Typescript project, use the following import syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { INTERFACE_IDS } from '@lukso/lsp-smart-contracts/dist/constants.cjs.js';\n\n// This will raise an error if you have ES Lint enabled,\n// but will allow you to import the constants in a Hardhat + Typescript based project.\nconst LSP0_INTERFACE_ID = INTERFACE_IDS.LSP0ERC725Account;\n")),(0,r.kt)("p",null,"This is due to the current issue that it is not possible to import ES Modules in Hardhat Typescript projects.")),(0,r.kt)(i,{mdxType:"InterfaceIdsTable"}))}f.isMDXComponent=!0}}]);