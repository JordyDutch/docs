"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[2014],{3905:(t,e,a)=>{a.d(e,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var i=n.createContext({}),c=function(t){var e=n.useContext(i),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},u=function(t){var e=c(t.components);return n.createElement(i.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,i=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),p=c(a),m=r,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||l;return a?n.createElement(h,s(s({ref:e},u),{},{components:a})):n.createElement(h,s({ref:e},u))}));function m(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,s=new Array(l);s[0]=p;var o={};for(var i in e)hasOwnProperty.call(e,i)&&(o[i]=e[i]);o.originalType=t,o.mdxType="string"==typeof t?t:r,s[1]=o;for(var c=2;c<l;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5162:(t,e,a)=>{a.d(e,{Z:()=>s});var n=a(7294),r=a(6010);const l="tabItem_Ymn6";function s(t){let{children:e,hidden:a,className:s}=t;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:a},e)}},4866:(t,e,a)=>{a.d(e,{Z:()=>y});var n=a(7462),r=a(7294),l=a(6010),s=a(2466),o=a(6775),i=a(1980),c=a(7392),u=a(12);function d(t){return function(t){var e;return(null==(e=r.Children.map(t,(t=>{if(!t||(0,r.isValidElement)(t)&&function(t){const{props:e}=t;return!!e&&"object"==typeof e&&"value"in e}(t))return t;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof t.type?t.type:t.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:e.filter(Boolean))??[]}(t).map((t=>{let{props:{value:e,label:a,attributes:n,default:r}}=t;return{value:e,label:a,attributes:n,default:r}}))}function p(t){const{values:e,children:a}=t;return(0,r.useMemo)((()=>{const t=e??d(a);return function(t){const e=(0,c.l)(t,((t,e)=>t.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((t=>t.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(t),t}),[e,a])}function m(t){let{value:e,tabValues:a}=t;return a.some((t=>t.value===e))}function h(t){let{queryString:e=!1,groupId:a}=t;const n=(0,o.k6)(),l=function(t){let{queryString:e=!1,groupId:a}=t;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:e,groupId:a});return[(0,i._X)(l),(0,r.useCallback)((t=>{if(!l)return;const e=new URLSearchParams(n.location.search);e.set(l,t),n.replace({...n.location,search:e.toString()})}),[l,n])]}function g(t){const{defaultValue:e,queryString:a=!1,groupId:n}=t,l=p(t),[s,o]=(0,r.useState)((()=>function(t){let{defaultValue:e,tabValues:a}=t;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${a.map((t=>t.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=a.find((t=>t.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:e,tabValues:l}))),[i,c]=h({queryString:a,groupId:n}),[d,g]=function(t){let{groupId:e}=t;const a=function(t){return t?`docusaurus.tab.${t}`:null}(e),[n,l]=(0,u.Nk)(a);return[n,(0,r.useCallback)((t=>{a&&l.set(t)}),[a,l])]}({groupId:n}),f=(()=>{const t=i??d;return m({value:t,tabValues:l})?t:null})();(0,r.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((t=>{if(!m({value:t,tabValues:l}))throw new Error(`Can't select invalid tab value=${t}`);o(t),c(t),g(t)}),[c,g,l]),tabValues:l}}var f=a(2389);const v="tabList__CuJ",k="tabItem_LNqP";function b(t){let{className:e,block:a,selectedValue:o,selectValue:i,tabValues:c}=t;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),p=t=>{const e=t.currentTarget,a=u.indexOf(e),n=c[a].value;n!==o&&(d(e),i(n))},m=t=>{var e;let a=null;switch(t.key){case"Enter":p(t);break;case"ArrowRight":{const e=u.indexOf(t.currentTarget)+1;a=u[e]??u[0];break}case"ArrowLeft":{const e=u.indexOf(t.currentTarget)-1;a=u[e]??u[u.length-1];break}}null==(e=a)||e.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},e)},c.map((t=>{let{value:e,label:a,attributes:s}=t;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===e?0:-1,"aria-selected":o===e,key:e,ref:t=>u.push(t),onKeyDown:m,onClick:p},s,{className:(0,l.Z)("tabs__item",k,null==s?void 0:s.className,{"tabs__item--active":o===e})}),a??e)})))}function w(t){let{lazy:e,children:a,selectedValue:n}=t;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(e){const t=l.find((t=>t.props.value===n));return t?(0,r.cloneElement)(t,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((t,e)=>(0,r.cloneElement)(t,{key:e,hidden:t.props.value!==n}))))}function C(t){const e=g(t);return r.createElement("div",{className:(0,l.Z)("tabs-container",v)},r.createElement(b,(0,n.Z)({},t,e)),r.createElement(w,(0,n.Z)({},t,e)))}function y(t){const e=(0,f.Z)();return r.createElement(C,(0,n.Z)({key:String(e)},t))}},4521:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),l=a(4866),s=a(5162);const o={sidebar_label:"Interact With Contracts",sidebar_position:3},i="Interact With Contracts",c={unversionedId:"guides/vault/interact-with-contracts",id:"guides/vault/interact-with-contracts",title:"Interact With Contracts",description:"Similar to our previous guide on setting data on the Vault, in this guide, we will be learning how to interact with other contracts through the Vault's execute function.",source:"@site/docs/guides/vault/interact-with-contracts.md",sourceDirName:"guides/vault",slug:"/guides/vault/interact-with-contracts",permalink:"/guides/vault/interact-with-contracts",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/vault/interact-with-contracts.md",tags:[],version:"current",lastUpdatedAt:1685539833,formattedLastUpdatedAt:"May 31, 2023",sidebarPosition:3,frontMatter:{sidebar_label:"Interact With Contracts",sidebar_position:3},sidebar:"guidesSidebar",previous:{title:"Edit Vault Data",permalink:"/guides/vault/edit-vault-data"},next:{title:"Restrict Addresses to Vaults",permalink:"/guides/vault/restrict-addresses-to-vaults"}},u={},d=[{value:"Setup",id:"setup",level:2},{value:"Step 1 - Setup imports &amp; constants",id:"step-1---setup-imports--constants",level:2},{value:"Step 2 - Create the contracts instances",id:"step-2---create-the-contracts-instances",level:2},{value:"Step 3 - Encode the calldatas",id:"step-3---encode-the-calldatas",level:2},{value:"Encode Target Contract calldata",id:"encode-target-contract-calldata",level:3},{value:"Encode Vault calldata",id:"encode-vault-calldata",level:3},{value:"Step 4 - Execute the calldata through the UP",id:"step-4---execute-the-calldata-through-the-up",level:2},{value:"Final code",id:"final-code",level:2}],p={toc:d};function m(t){let{components:e,...o}=t;return(0,r.kt)("wrapper",(0,n.Z)({},p,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interact-with-contracts"},"Interact With Contracts"),(0,r.kt)("p",null,"Similar to our ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/guides/vault/edit-vault-data"},"previous guide"))," on setting data on the Vault, in this guide, we will be learning how to ",(0,r.kt)("strong",{parentName:"p"},"interact with other contracts")," through the Vault's execute function."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This guide is also very similar to the guide: ",(0,r.kt)("a",{parentName:"p",href:"/guides/universal-profile/interact-with-contracts"},(0,r.kt)("strong",{parentName:"a"},"Interact with contract using a Universal Profile")),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Interaction flow"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guide - Interact with other contracts using a Vault",src:a(9145).Z,width:"8408",height:"2432"})),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"To complete this mini-guide, we will need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"an EOA with some LYX for gas fees and the required ",(0,r.kt)("a",{parentName:"li",href:"/standards/universal-profile/lsp6-key-manager#permissions"},(0,r.kt)("strong",{parentName:"a"},"permissions"))," for the interaction."),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"UniversalProfile")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"LSP9Vault")," contracts ABIs from the ",(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@lukso/lsp-smart-contracts"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts"))," npm package."),(0,r.kt)("li",{parentName:"ul"},"the address of the Universal Profile."),(0,r.kt)("li",{parentName:"ul"},"the address of the LSP9 Vault."),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"targetContract")," ABI."),(0,r.kt)("li",{parentName:"ul"},"the address of the Target Contract.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The chosen EOA needs to have ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#permissions"},(0,r.kt)("strong",{parentName:"a"},"CALL Permission"))," together with ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#allowed-calls"},(0,r.kt)("strong",{parentName:"a"},"AllowedCalls"))," or ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#super-permissions"},(0,r.kt)("strong",{parentName:"a"},"SUPER_CALL Pemrission")))),(0,r.kt)("p",null,"Make sure you have the following dependencies installed before beginning this tutorial."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Either ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,r.kt)("inlineCode",{parentName:"a"},"web3.js"))," or ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,r.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")))),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install web3 @lukso/lsp-smart-contracts\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install ethers @lukso/lsp-smart-contracts\n")))),(0,r.kt)("h2",{id:"step-1---setup-imports--constants"},"Step 1 - Setup imports & constants"),(0,r.kt)("p",null,"At this step we will import the needed ",(0,r.kt)("strong",{parentName:"p"},"contract ABIs")," and we will save all the ",(0,r.kt)("strong",{parentName:"p"},"required addresses")," in constants.",(0,r.kt)("br",{parentName:"p"}),"\n","Also we will initialize our ",(0,r.kt)("strong",{parentName:"p"},"EOA")," for further use."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Save the Target Contract ABI in a separate json and import it in the main file.",(0,r.kt)("br",{parentName:"p"}),"\n","You can quickly compile and get a contract's ABI in ",(0,r.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},(0,r.kt)("strong",{parentName:"a"},"Remix IDO")))),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports & Constants"',title:'"Imports',"&":!0,'Constants"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport TargetContractABI from './TargetContractABI.json';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.testnet.lukso.network');\nconst universalProfileAddress = '0x...';\nconst vaultAddress = '0x...';\nconst targetContractAddress = '0x...';\n\n// setup EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst myEOA = web3.eth.accounts.wallet.add(privateKey);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports & Constants"',title:'"Imports',"&":!0,'Constants"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport TargetContractABI from './TargetContractABI.json';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.JsonRpcProvider(\n  'https://rpc.testnet.lukso.network',\n);\nconst universalProfileAddress = '0x...';\nconst vaultAddress = '0x...';\nconst targetContractAddress = '0x...';\n\n// setup EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n")))),(0,r.kt)("h2",{id:"step-2---create-the-contracts-instances"},"Step 2 - Create the contracts instances"),(0,r.kt)("p",null,"Further we will create instances for our contracts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create an Universal Profile contract instance from ",(0,r.kt)("inlineCode",{parentName:"li"},"universalProfileAddress"),"."),(0,r.kt)("li",{parentName:"ul"},"Create a Target Contract instance from the ",(0,r.kt)("inlineCode",{parentName:"li"},"targetContractAddress"),".")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contracts instances"',title:'"Contracts','instances"':!0},"// Create Universal Profile contract instance\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n// Create LSP9 Vault contract instance\nconst vault = new web3.eth.Contract(LSP9Vault.abi, vaultAddress);\n// Create Target Contract contract instance\nconst targetContract = new web3.eth.Contract(\n  TargetContractABI,\n  targetContractAddress,\n);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contracts instances"',title:'"Contracts','instances"':!0},"// Create Universal Profile contract instance\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n// Create LSP9 Vault contract instance\nconst vault = new ethers.Contract(vaultAddress, LSP9Vault.abi);\n// Create Target Contract contract instance\nconst targetContract = new ethers.Contract(\n  targetContractAddress,\n  TargetContractABI,\n);\n")))),(0,r.kt)("h2",{id:"step-3---encode-the-calldatas"},"Step 3 - Encode the calldatas"),(0,r.kt)("p",null,"This is the easy part, we need to create 2 calldatas:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("em",{parentName:"li"},"first calldata")," will be executed on the Target Contract."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("em",{parentName:"li"},"second calldata")," will be executed on the Vault and will trigger the ",(0,r.kt)("em",{parentName:"li"},"first calldata"),".")),(0,r.kt)("h3",{id:"encode-target-contract-calldata"},"Encode Target Contract calldata"),(0,r.kt)("p",null,"Encoding the calldata that will be be executed on the Target Contract."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Target calldata"',title:'"Target','calldata"':!0},"// 1. encode the calldata to be run at the targetContract\n// assuming targetContract is a Contract instance\nconst targetCalldata = targetContract.methods\n  .myCoolfunction('dummyParameter')\n  .encodeABI();\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Target calldata"',title:'"Target','calldata"':!0},"// 1. encode the calldata to be run at the targetContract\n// assuming targetContract is a Contract instance\nconst targetCalldata = targetContract.interface.encodeFunctionData(\n  'myCoolfunction',\n  ['dummyParameter'],\n);\n")))),(0,r.kt)("h3",{id:"encode-vault-calldata"},"Encode Vault calldata"),(0,r.kt)("p",null,"Encoding the calldata that will be be executed on the Vault. This calldata will also trigger the calldata that will be executed on the Target Contract."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Vault calldata"',title:'"Vault','calldata"':!0},"// 2. encode the calldata to be run on the Vault,\n// passing the calldata to be run at the targetContract as 4th parameter\nconst vaultCalldata = await vault.methods\n  .execute(0, targetContract.address, 0, targetCalldata)\n  .encodeABI();\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Vault calldata"',title:'"Vault','calldata"':!0},"// 2. encode the calldata to be run on the Vault,\n// passing the calldata to be run at the targetContract as 4th parameter\nconst vaultCalldata = vault.interface.encodeFunctionData('execute', [\n  0,\n  targetContract.address,\n  0,\n  targetCalldata,\n]);\n")))),(0,r.kt)("h2",{id:"step-4---execute-the-calldata-through-the-up"},"Step 4 - Execute the calldata through the UP"),(0,r.kt)("p",null,"The final step is to execute the encoded calldata through the Universal Profile. Since we are calling from a UP's controller address (with proper ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#permissions"},(0,r.kt)("strong",{parentName:"a"},"permissions")),"), the Key Manager will authorize the transaction."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Send transaction"',title:'"Send','transaction"':!0},"// Execute the calldata through the Universal Profile\nawait universalProfile.methods.execute(0, vaultAddress, 0, vaultCalldata).send({\n  from: myEOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Send transaction"',title:'"Send','transaction"':!0},"// Execute the calldata through the Universal Profile\nawait universalProfile\n  .connect(myEOA)\n  .execute(0, vaultAddress, 0, vaultCalldata);\n")))),(0,r.kt)("h2",{id:"final-code"},"Final code"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Interacting with other contracts through the vault"',title:'"Interacting',with:!0,other:!0,contracts:!0,through:!0,the:!0,'vault"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport TargetContractABI from './TargetContractABI.json';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.testnet.lukso.network');\nconst universalProfileAddress = '0x...';\nconst vaultAddress = '0x...';\nconst targetContractAddress = '0x...';\n\n// setup EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst myEOA = web3.eth.accounts.wallet.add(privateKey);\n\n// Create Universal Profile contract instance\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n// Create LSP9 Vault contract instance\nconst vault = new web3.eth.Contract(LSP9Vault.abi, vaultAddress);\n// Create Target Contract contract instance\nconst targetContract = new web3.eth.Contract(\n  TargetContractABI,\n  targetContractAddress,\n);\n\n// 1. encode the calldata to be run at the targetContract\n// assuming targetContract is a Contract instance\nconst targetCalldata = targetContract.methods\n  .myCoolfunction('dummyParameter')\n  .encodeABI();\n\n// 2. encode the calldata to be run on the Vault,\n// passing the calldata to be run at the targetContract as 4th parameter\nconst vaultCalldata = await vault.methods\n  .execute(0, targetContract.address, 0, targetCalldata)\n  .encodeABI();\n\n// Execute the calldata through the Universal Profile\nawait universalProfile.methods.execute(0, vaultAddress, 0, vaultCalldata).send({\n  from: myEOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Interacting with other contracts through the vault"',title:'"Interacting',with:!0,other:!0,contracts:!0,through:!0,the:!0,'vault"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport TargetContractABI from './TargetContractABI.json';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.providers.JsonRpcProvider(\n  'https://rpc.testnet.lukso.network',\n);\nconst universalProfileAddress = '0x...';\nconst vaultAddress = '0x...';\nconst targetContractAddress = '0x...';\n\n// setup EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n\n// Create Universal Profile contract instance\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n// Create LSP9 Vault contract instance\nconst vault = new ethers.Contract(vaultAddress, LSP9Vault.abi);\n// Create Target Contract contract instance\nconst targetContract = new ethers.Contract(\n  targetContractAddress,\n  TargetContractABI,\n);\n\n// 1. encode the calldata to be run at the targetContract\n// assuming targetContract is a Contract instance\nconst targetCalldata = targetContract.interface.encodeFunctionData(\n  'myCoolfunction',\n  ['dummyParameter'],\n);\n\n// 2. encode the calldata to be run on the Vault,\n// passing the calldata to be run at the targetContract as 4th parameter\nconst vaultCalldata = vault.interface.encodeFunctionData('execute', [\n  0,\n  targetContractAddress,\n  0,\n  targetCalldata,\n]);\n\n// Execute the calldata through the Universal Profile\nawait universalProfile\n  .connect(myEOA)\n  .execute(0, vaultAddress, 0, vaultCalldata);\n")))),(0,r.kt)("p",null,"In the code snippet above, we interacted with ",(0,r.kt)("inlineCode",{parentName:"p"},"myCoolfunction(..)")," function on the ",(0,r.kt)("strong",{parentName:"p"},"targetContract")," contract through the Vault's ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp9-vault#execute"},"execute")," function. The call was encoded and executed through the Universal Profile."))}m.isMDXComponent=!0},9145:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/interact-with-contract-using-vaults-flow-e7f085a10e49e9db24dc672028f57094.jpg"}}]);