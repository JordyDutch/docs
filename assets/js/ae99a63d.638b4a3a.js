"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[6011],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(a),m=r,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||l;return a?n.createElement(h,o(o({ref:t},u),{},{components:a})):n.createElement(h,o({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<l;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>C});var n=a(7462),r=a(7294),l=a(6010),o=a(2466),s=a(6775),i=a(1980),c=a(7392),u=a(12);function d(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function p(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,s.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,i._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=p(e),[o,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[i,c]=h({queryString:a,groupId:n}),[d,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,u.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),g=(()=>{const e=i??d;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),f(e)}),[c,f,l]),tabValues:l}}var g=a(2389);const k="tabList__CuJ",v="tabItem_LNqP";function b(e){let{className:t,block:a,selectedValue:s,selectValue:i,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),p=e=>{const t=e.currentTarget,a=u.indexOf(t),n=c[a].value;n!==s&&(d(t),i(n))},m=e=>{var t;let a=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;a=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;a=u[t]??u[u.length-1];break}}null==(t=a)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},o,{className:(0,l.Z)("tabs__item",v,null==o?void 0:o.className,{"tabs__item--active":s===t})}),a??t)})))}function w(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function y(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k)},r.createElement(b,(0,n.Z)({},e,t)),r.createElement(w,(0,n.Z)({},e,t)))}function C(e){const t=(0,g.Z)();return r.createElement(y,(0,n.Z)({key:String(t)},e))}},586:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),l=a(4866),o=a(5162);const s={sidebar_label:"Interact with Contracts",sidebar_position:5},i="Interact with other contracts",c={unversionedId:"guides/universal-profile/interact-with-contracts",id:"guides/universal-profile/interact-with-contracts",title:"Interact with other contracts",description:"In this guide, we will learn how to use our Universal Profile to interact with any other smart contract (like if we were using a regular Externally Owned Account).",source:"@site/docs/guides/universal-profile/interact-with-contracts.md",sourceDirName:"guides/universal-profile",slug:"/guides/universal-profile/interact-with-contracts",permalink:"/guides/universal-profile/interact-with-contracts",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/universal-profile/interact-with-contracts.md",tags:[],version:"current",lastUpdatedAt:1685438104,formattedLastUpdatedAt:"May 30, 2023",sidebarPosition:5,frontMatter:{sidebar_label:"Interact with Contracts",sidebar_position:5},sidebar:"guidesSidebar",previous:{title:"Transfer LYX",permalink:"/guides/universal-profile/transfer-lyx"},next:{title:"Check if an address is a UP",permalink:"/guides/universal-profile/check-if-address-is-universal-profile"}},u={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Setup",id:"setup",level:2},{value:"Step 1 - Create the contracts instances",id:"step-1---create-the-contracts-instances",level:2},{value:"Step 2 - Encode the calldatas",id:"step-2---encode-the-calldatas",level:2},{value:"Step 3 - Execute the calldata",id:"step-3---execute-the-calldata",level:2},{value:"Load the EOA",id:"load-the-eoa",level:3},{value:"Send the execute calldata",id:"send-the-execute-calldata",level:3},{value:"Final Code",id:"final-code",level:2}],p={toc:d};function m(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interact-with-other-contracts"},"Interact with other contracts"),(0,r.kt)("p",null,"In this guide, we will learn how to use our Universal Profile to interact with any other smart contract (like if we were using a regular Externally Owned Account)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Interaction flow"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guide - Interact with other contracts using a Universal Profile",src:a(8956).Z,width:"6054",height:"2432"})),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"We have seen in the previous example how to send LYX from our UP via the ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp0-erc725-account#execute"},(0,r.kt)("inlineCode",{parentName:"a"},"execute(...)"))," function."),(0,r.kt)("p",null,"This function offers a fourth parameter: ",(0,r.kt)("inlineCode",{parentName:"p"},"_data"),", that provides a lot of flexibility when interacting from our UP. The ",(0,r.kt)("inlineCode",{parentName:"p"},"_data")," parameter is handy when the ",(0,r.kt)("inlineCode",{parentName:"p"},"_to")," recipient is a smart contract."),(0,r.kt)("p",null,"If you want to call a specific smart contract that was deployed on the network by the Universal Profile, the parameters of the ",(0,r.kt)("inlineCode",{parentName:"p"},"execute(...)")," function will be as follow:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_operation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," (for ",(0,r.kt)("inlineCode",{parentName:"li"},"CALL"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_to"),": the ",(0,r.kt)("inlineCode",{parentName:"li"},"address")," of the smart contract we want to interact with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_value_"),": empty (0)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_data"),": the ABI-encoded function name and arguments, to be run at the ",(0,r.kt)("inlineCode",{parentName:"li"},"_to")," contract address.")),(0,r.kt)("p",null,"Suppose a smart contract ",(0,r.kt)("inlineCode",{parentName:"p"},"targetContract")," was deployed on the network and we want our UP to call the function ",(0,r.kt)("inlineCode",{parentName:"p"},"myCoolFunction")," on this contract. We will have to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html#methods-mymethod-encodeabi"},"ABI-encode")," the function call with the parameters we want to pass."),(0,r.kt)("li",{parentName:"ol"},"Pass the encoded calldata as argument ",(0,r.kt)("inlineCode",{parentName:"li"},"_data")," of the ",(0,r.kt)("inlineCode",{parentName:"li"},"execute(...)")," function.")),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"To complete this guide, we will need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"an EOA with some LYX for gas fees and the required ",(0,r.kt)("a",{parentName:"li",href:"/standards/universal-profile/lsp6-key-manager#permissions"},"permissions")," for the interaction."),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"UniversalProfile")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"KeyManager")," contracts ABIs from the ",(0,r.kt)("a",{parentName:"li",href:"/tools/lsp-smart-contracts/getting-started"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts"))," npm package."),(0,r.kt)("li",{parentName:"ul"},"the address of our Universal Profile."),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"targetContract")," ABI."),(0,r.kt)("li",{parentName:"ul"},"the address of the Target Contract.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The chosen EOA needs to have ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#permissions"},(0,r.kt)("strong",{parentName:"a"},"CALL Permission"))," together with ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#allowed-calls"},(0,r.kt)("strong",{parentName:"a"},"Allowed Calls"))," or ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#super-permissions"},(0,r.kt)("strong",{parentName:"a"},"SUPER_CALL Permission")))),(0,r.kt)("p",null,"Make sure you have the following dependencies installed before beginning this tutorial:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Either ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,r.kt)("inlineCode",{parentName:"a"},"web3.js"))," or ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,r.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")))),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install web3 @lukso/lsp-smart-contracts\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install ethers @lukso/lsp-smart-contracts\n")))),(0,r.kt)("h2",{id:"step-1---create-the-contracts-instances"},"Step 1 - Create the contracts instances"),(0,r.kt)("p",null,"The first step is to create instances of our Universal Profile, Key Manager contracts and the Target Contract."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create an Universal Profile contract instance from ",(0,r.kt)("inlineCode",{parentName:"li"},"universalProfileAddress"),"."),(0,r.kt)("li",{parentName:"ul"},"Create a Target Contract instance from the ",(0,r.kt)("inlineCode",{parentName:"li"},"targetContractAddress"),".")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Save the Target Contract ABI in a separate JSON and import it in the main file.",(0,r.kt)("br",{parentName:"p"}),"\n","You can quickly compile and get a contract's ABI in ",(0,r.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},"Remix IDE"),".")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports & Constants"',title:'"Imports',"&":!0,'Constants"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport TargetContractABI from './TargetContractABI.json';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.testnet.lukso.network');\n\nconst universalProfileAddress = '0x...';\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n\nconst targetContractAddress = '0x...';\nconst targetContract = new web3.eth.Contract(\n  TargetContractABI,\n  targetContractAddress,\n);\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports & Constants"',title:'"Imports',"&":!0,'Constants"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport TargetContractABI from './TargetContractABI.json';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.providers.JsonRpcProvider(\n  'https://rpc.testnet.lukso.network',\n);\n\nconst universalProfileAddress = '0x...';\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n  provider,\n);\n\nconst targetContractAddress = '0x...';\nconst targetContract = new ethers.Contract(\n  targetContractAddress,\n  TargetContractABI,\n  provider,\n);\n")))),(0,r.kt)("h2",{id:"step-2---encode-the-calldatas"},"Step 2 - Encode the calldatas"),(0,r.kt)("p",null,"We need to create a calldata that will be executed on the Target Contract."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Target calldata"',title:'"Target','calldata"':!0},"// 1. encode the calldata to be run at the targetContract\n// assuming targetContract is a Contract instance\nconst targetCalldata = targetContract.methods\n  .myCoolfunction('dummyParameter')\n  .encodeABI();\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Target calldata"',title:'"Target','calldata"':!0},"// 1. encode the calldata to be run at the targetContract\n// assuming targetContract is a Contract instance\nconst targetCalldata = targetContract.interface.encodeFunctionData(\n  'myCoolfunction',\n  ['dummyParameter'],\n);\n")))),(0,r.kt)("h2",{id:"step-3---execute-the-calldata"},"Step 3 - Execute the calldata"),(0,r.kt)("h3",{id:"load-the-eoa"},"Load the EOA"),(0,r.kt)("p",null,"Like in other guides, an important step is to load our EOA that is a controller for our Universal Profile."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Setup EOA"',title:'"Setup','EOA"':!0},"const PRIVATE_KEY = '0x...'; // your EOA private key (controller address)\nconst EOA = web3.eth.accounts.wallet.add(PRIVATE_KEY);\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Setup EOA"',title:'"Setup','EOA"':!0},"const PRIVATE_KEY = '0x...'; // your EOA private key (controller address)\nconst EOA = new ethers.Wallet(PRIVATE_KEY).connect(provider);\n")))),(0,r.kt)("h3",{id:"send-the-execute-calldata"},"Send the execute calldata"),(0,r.kt)("p",null,"The final step is to pass the encoded calldata to the Universal Profile. Since we are calling from an EOA that is a ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp6-key-manager#introduction"},"controller")," on the UP, the Key Manager will authorize the transaction."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Send transaction"',title:'"Send','transaction"':!0},"await universalProfile.methods.execute(\n  OPERATION_CALL,\n  targetContract.address,\n  0,\n  targetCalldata,\n).send({\n  from: EOA.address,\n  gasLimit: 300_000,\n});\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Send transaction"',title:'"Send','transaction"':!0},"await universalProfile\n  .connect(EOA)\n  .execute(\n    OPERATION_CALL,\n    targetContract.address,\n    0,\n    targetCalldata,\n  );\n")))),(0,r.kt)("h2",{id:"final-code"},"Final Code"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Final code"',title:'"Final','code"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport TargetContractABI from './TargetContractABI.json';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.testnet.lukso.network');\n\nconst universalProfileAddress = '0x...';\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n\nconst targetContractAddress = '0x...';\nconst targetContract = new web3.eth.Contract(\n  TargetContractABI,\n  targetContractAddress,\n);\n\n// 1. encode the calldata to be run on the UP\nconst targetCalldata = targetContract.methods\n  .myCoolfunction('dummyParameter')\n  .encodeABI();\n\nconst OPERATION_CALL = 0;\n\nconst PRIVATE_KEY = '0x...'; // your EOA private key (controller address)\nconst EOA = web3.eth.accounts.wallet.add(PRIVATE_KEY);\n\n// 2. execute the calldata through the UP\nawait universalProfile.methods.execute(\n  OPERATION_CALL,\n  targetContract.address,\n  0,\n  targetCalldata,\n).send({\n  from: EOA.address,\n  gasLimit: 300_000,\n});\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Final code"',title:'"Final','code"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport TargetContractABI from './TargetContractABI.json';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.providers.JsonRpcProvider(\n  'https://rpc.testnet.lukso.network',\n);\n\nconst universalProfileAddress = '0x...';\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n  provider,\n);\n\nconst targetContractAddress = '0x...';\nconst targetContract = new ethers.Contract(\n  targetContractAddress,\n  TargetContractABI,\n  provider,\n);\n\n// 1. encode the calldata to be run on the UP,\nconst targetCalldata = targetContract.interface.encodeFunctionData(\n  'myCoolfunction',\n  ['dummyParameter'],\n);\n\nconst OPERATION_CALL = 0;\n\nconst PRIVATE_KEY = '0x...'; // your EOA private key (controller address)\nconst EOA = new ethers.Wallet(PRIVATE_KEY).connect(provider);\n\n// 2. execute the calldata through the UP\nawait universalProfile\n  .connect(EOA)\n  .execute(\n    OPERATION_CALL,\n    targetContract.address,\n    0,\n    targetCalldata,\n  );\n")))))}m.isMDXComponent=!0},8956:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/interact-with-contracts-using-universal-profile-flow-6dc50cb435adf316e2a86243ca1859ab.jpg"}}]);