"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[7686],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>v});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(a),v=r,m=p["".concat(i,".").concat(v)]||p[v]||d[v]||l;return a?n.createElement(m,s(s({ref:t},u),{},{components:a})):n.createElement(m,s({ref:t},u))}));function v(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=p;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<l;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(7294),r=a(6010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>U});var n=a(7462),r=a(7294),l=a(6010),s=a(2466),o=a(6775),i=a(1980),c=a(7392),u=a(12);function d(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function p(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function v(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,i._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=p(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!v({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[i,c]=m({queryString:a,groupId:n}),[d,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,u.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),f=(()=>{const e=i??d;return v({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!v({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),h(e)}),[c,h,l]),tabValues:l}}var f=a(2389);const y="tabList__CuJ",g="tabItem_LNqP";function b(e){let{className:t,block:a,selectedValue:o,selectValue:i,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),p=e=>{const t=e.currentTarget,a=u.indexOf(t),n=c[a].value;n!==o&&(d(t),i(n))},v=e=>{var t;let a=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;a=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;a=u[t]??u[u.length-1];break}}null==(t=a)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:v,onClick:p},s,{className:(0,l.Z)("tabs__item",g,null==s?void 0:s.className,{"tabs__item--active":o===t})}),a??t)})))}function D(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=h(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",y)},r.createElement(b,(0,n.Z)({},e,t)),r.createElement(D,(0,n.Z)({},e,t)))}function U(e){const t=(0,f.Z)();return r.createElement(k,(0,n.Z)({key:String(t)},e))}},4404:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>v,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),l=a(4866),s=a(5162);const o={sidebar_label:"Edit Vault Data",sidebar_position:2},i="Edit Vault Data",c={unversionedId:"guides/vault/edit-vault-data",id:"guides/vault/edit-vault-data",title:"Edit Vault Data",description:"This guide will teach you how to set data to an LSP9Vault contract through a UniversalProfile owned by an LSP6KeyManager. Any data can be attached to the vault, and since it supports the LSP1-UniversalReceiver standard, we will set the Universal Receiver Delegate address inside the storage.",source:"@site/docs/guides/vault/edit-vault-data.md",sourceDirName:"guides/vault",slug:"/guides/vault/edit-vault-data",permalink:"/guides/vault/edit-vault-data",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/vault/edit-vault-data.md",tags:[],version:"current",lastUpdatedAt:1685539833,formattedLastUpdatedAt:"May 31, 2023",sidebarPosition:2,frontMatter:{sidebar_label:"Edit Vault Data",sidebar_position:2},sidebar:"guidesSidebar",previous:{title:"Create a Vault",permalink:"/guides/vault/create-a-vault"},next:{title:"Interact With Contracts",permalink:"/guides/vault/interact-with-contracts"}},u={},d=[{value:"Setting Data (Universal Receiver Delegate)",id:"setting-data-universal-receiver-delegate",level:2},{value:"Setup",id:"setup",level:2},{value:"Step 1 - Imports, constants and EOA",id:"step-1---imports-constants-and-eoa",level:2},{value:"Step 2 - Deploying Universal Receiver Delegate (URD)",id:"step-2---deploying-universal-receiver-delegate-urd",level:2},{value:"Create a contract instance",id:"create-a-contract-instance",level:3},{value:"Send the contract deployment transaction",id:"send-the-contract-deployment-transaction",level:3},{value:"Final code",id:"final-code",level:3},{value:"Step 3 - Setting the URD address in the storage",id:"step-3---setting-the-urd-address-in-the-storage",level:2},{value:"Create the contract instances",id:"create-the-contract-instances",level:3},{value:"Encode <code>setData(..)</code> calldata",id:"encode-setdata-calldata",level:3},{value:"Update the Vault data",id:"update-the-vault-data",level:3},{value:"Final code",id:"final-code-1",level:3},{value:"Final code - Deploy &amp; Update",id:"final-code---deploy--update",level:2},{value:"Reading Data",id:"reading-data",level:2}],p={toc:d};function v(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"edit-vault-data"},"Edit Vault Data"),(0,r.kt)("p",null,"This guide will teach you how to set data to an ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/standards/smart-contracts/lsp9-vault"},"LSP9Vault"))," contract through a UniversalProfile owned by an LSP6KeyManager. Any data can be attached to the vault, and since it supports the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/standards/generic-standards/lsp1-universal-receiver"},"LSP1-UniversalReceiver"))," standard, we will set the ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp1-universal-receiver-delegate-vault"},(0,r.kt)("strong",{parentName:"a"},"Universal Receiver Delegate"))," address inside the storage."),(0,r.kt)("h2",{id:"setting-data-universal-receiver-delegate"},"Setting Data (Universal Receiver Delegate)"),(0,r.kt)("p",null,"The default implementation of the ",(0,r.kt)("strong",{parentName:"p"},"Universal Receiver Delegate")," of the Vault that we will deploy will register the assets received to the storage and and will remove them when their balance equals 0."),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Make sure you have the following dependencies installed before beginning this tutorial:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Either ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,r.kt)("inlineCode",{parentName:"a"},"web3.js"))," or ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,r.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")))),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install web3 @lukso/lsp-smart-contracts\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install ethers @lukso/lsp-smart-contracts\n")))),(0,r.kt)("h2",{id:"step-1---imports-constants-and-eoa"},"Step 1 - Imports, constants and EOA"),(0,r.kt)("p",null,"For starters we need to get the ",(0,r.kt)("em",{parentName:"p"},"ABIs")," for the contracts that we will use and the ",(0,r.kt)("em",{parentName:"p"},"bytecode")," for the ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP1UniversalReceiverDelegateVault"),".",(0,r.kt)("br",{parentName:"p"}),"\n","After that we need to store the address of our LSP9 Vault and our Universal Profile.",(0,r.kt)("br",{parentName:"p"}),"\n","Then we will initialize the EOA that we will further use."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports, Constants & EOA"',title:'"Imports,',Constants:!0,"&":!0,'EOA"':!0},"import LSP1UniversalReceiverDelegateVault from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateVault.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\n// constants\nconst web3 = new Web3('https://rpc.testnet.lukso.network');\nconst vaultAddress = '0x...';\nconst universalProfileAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...';\nconst myEOA = web3.eth.accounts.wallet.add(privateKey);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports, Constants & EOA"',title:'"Imports,',Constants:!0,"&":!0,'EOA"':!0},"import LSP1UniversalReceiverDelegateVault from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateVault.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\n// constants\nconst provider = new ethers.providers.JsonRpcProvider(\n  'https://rpc.testnet.lukso.network',\n);\nconst vaultAddress = '0x...';\nconst universalProfileAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n")))),(0,r.kt)("h2",{id:"step-2---deploying-universal-receiver-delegate-urd"},"Step 2 - Deploying Universal Receiver Delegate (URD)"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("strong",{parentName:"p"},"Universal Profile")," and the ",(0,r.kt)("strong",{parentName:"p"},"Vault")," don't use the same implementation of the Universal Receiver Delegate.")),(0,r.kt)("h3",{id:"create-a-contract-instance"},"Create a contract instance"),(0,r.kt)("p",null,"At this step we will create an instance of the Vault URD that we will further be used to deploy one."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contract instance of the LSP9 Vault URD"',title:'"Contract',instance:!0,of:!0,the:!0,LSP9:!0,Vault:!0,'URD"':!0},"// create an instance of the LSP1UniversalReceiverDelegateVault\nconst vaultURD = new web3.eth.Contract(LSP1UniversalReceiverDelegateVault.abi);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contract instance of the LSP9 Vault URD"',title:'"Contract',instance:!0,of:!0,the:!0,LSP9:!0,Vault:!0,'URD"':!0},"// create a LSP1UniversalReceiverDelegateVault Contract Factory\nconst vaultURDFactory = new ethers.ContractFactory(\n  LSP1UniversalReceiverDelegateVault.abi,\n  LSP1UniversalReceiverDelegateVault.bytecode,\n);\n")))),(0,r.kt)("h3",{id:"send-the-contract-deployment-transaction"},"Send the contract deployment transaction"),(0,r.kt)("p",null,"Send the deployment transaction and in a few seconds you will get a new deployed Vault URD."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Send the transaction for deploying a new LSP9 Vault URD"',title:'"Send',the:!0,transaction:!0,for:!0,deploying:!0,a:!0,new:!0,LSP9:!0,Vault:!0,'URD"':!0},"// deploy the Universal Receiver Delegate Vault contract\nawait vaultURD\n  .deploy({\n    data: LSP1UniversalReceiverDelegateVault.bytecode,\n  })\n  .send({\n    from: myEOA.address,\n    gas: 5_000_000,\n    gasPrice: '1000000000',\n  });\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Send the transaction for deploying a new LSP9 Vault URD"',title:'"Send',the:!0,transaction:!0,for:!0,deploying:!0,a:!0,new:!0,LSP9:!0,Vault:!0,'URD"':!0},"// deploy the Universal Receiver Delegate Vault contract\nconst vaultURD = await vaultURDFactory.connect(myEOA).deploy();\n")))),(0,r.kt)("h3",{id:"final-code"},"Final code"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Deploy a new LSP9 Vault Universal Receive Delegate"',title:'"Deploy',a:!0,new:!0,LSP9:!0,Vault:!0,Universal:!0,Receive:!0,'Delegate"':!0},"const deployVaultURD = async () => {\n  // create an instance of the LSP1UniversalReceiverDelegateVault\n  const vaultURD = new web3.eth.Contract(\n    LSP1UniversalReceiverDelegateVault.abi,\n  );\n  let vaultURDAddress;\n\n  // deploy the Universal Receiver Delegate Vault contract\n  await vaultURD\n    .deploy({\n      data: LSP1UniversalReceiverDelegateVault.bytecode,\n    })\n    .send({\n      from: myEOA.address,\n      gas: 5_000_000,\n      gasPrice: '1000000000',\n    })\n    .on('receipt', (receipt) => (vaultURDAddress = receipt.contractAddress));\n\n  return vaultURDAddress;\n};\n\n// deploy a new Vault URD and retrieve its address\nconst vaultURDAddress = await deployVaultURD();\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Deploy a new LSP9 Vault Universal Receive Delegate"',title:'"Deploy',a:!0,new:!0,LSP9:!0,Vault:!0,Universal:!0,Receive:!0,'Delegate"':!0},"const deployVaultURD = async () => {\n  // create a LSP1UniversalReceiverDelegateVault Contract Factory\n  const vaultURDFactory = new ethers.ContractFactory(\n    LSP1UniversalReceiverDelegateVault.abi,\n    LSP1UniversalReceiverDelegateVault.bytecode,\n  );\n\n  // deploy the Universal Receiver Delegate Vault contract\n  const vaultURD = await vaultURDFactory.connect(myEOA).deploy();\n\n  return vaultURD.target;\n};\n\n// deploy a new Vault URD and retrieve its address\nconst vaultURDAddress = await deployVaultURD();\n")))),(0,r.kt)("h2",{id:"step-3---setting-the-urd-address-in-the-storage"},"Step 3 - Setting the URD address in the storage"),(0,r.kt)("p",null,"The Vault's owner could be an ",(0,r.kt)("strong",{parentName:"p"},"EOA"),", or any ",(0,r.kt)("strong",{parentName:"p"},"other smart contract"),". In our case, we will suppose that the Vault's owner is a ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/introduction"},"Universal Profile")," that is controlled by a Key Manager."),(0,r.kt)("h3",{id:"create-the-contract-instances"},"Create the contract instances"),(0,r.kt)("p",null,"Firstly we need to create instances for the following contracts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/standards/universal-profile/lsp9-vault"},(0,r.kt)("strong",{parentName:"a"},"Vault"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/standards/universal-profile/lsp0-erc725account"},(0,r.kt)("strong",{parentName:"a"},"Universal Profile")))),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contract instances for the Universal Profile and Vault"',title:'"Contract',instances:!0,for:!0,the:!0,Universal:!0,Profile:!0,and:!0,'Vault"':!0},"// create an instance of the LSP9Vault\nconst vault = new web3.eth.Contract(LSP9Vault.abi, vaultAddress);\n// create an instance of the Universal Profile\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contract instances for the Universal Profile and Vault"',title:'"Contract',instances:!0,for:!0,the:!0,Universal:!0,Profile:!0,and:!0,'Vault"':!0},"// create an instance of the LSP9Vault\nconst vault = new ethers.Contract(vaultAddress, LSP9Vault.abi);\n// create an instance of the Universal Profile\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n")))),(0,r.kt)("h3",{id:"encode-setdata-calldata"},"Encode ",(0,r.kt)("inlineCode",{parentName:"h3"},"setData(..)")," calldata"),(0,r.kt)("p",null,"Secondly, we need to encode a calldata that will update the address of the Vault URD."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Calldata for updating the LSP9 Vault URD"',title:'"Calldata',for:!0,updating:!0,the:!0,LSP9:!0,Vault:!0,'URD"':!0},"// encode setData Calldata on the Vault\nconst setDataCalldata = await vault.methods\n  .setData(ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate, vaultURDAddress)\n  .encodeABI(); // Any other information can be stored here\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Calldata for updating the LSP9 Vault URD"',title:'"Calldata',for:!0,updating:!0,the:!0,LSP9:!0,Vault:!0,'URD"':!0},"// encode setData Calldata on the Vault\nconst setDataCalldata = vault.interface.encodeFunctionData('setData', [\n  ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate,\n  vaultURDAddress,\n]); // Any other information can be stored here\n")))),(0,r.kt)("h3",{id:"update-the-vault-data"},"Update the Vault data"),(0,r.kt)("p",null,"Lastly, we need to send the transaction that will update the Vault data through the Universal Profile's ",(0,r.kt)("inlineCode",{parentName:"p"},"execute(..)"),"."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Execute the calldata on the Universal Profile"',title:'"Execute',the:!0,calldata:!0,on:!0,Universal:!0,'Profile"':!0},"// execute the `setData(bytes32,bytes)` calldata that updates the Vault data\nawait universalProfile.methods\n  .execute(\n    0, // OPERATION CALL\n    vaultAddress,\n    0, // value to transfer\n    setDataCalldata,\n  )\n  .send({\n    from: myEOA.address,\n    gasLimit: 600_000,\n  });\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Execute the calldata on the Universal Profile"',title:'"Execute',the:!0,calldata:!0,on:!0,Universal:!0,'Profile"':!0},"// execute the `setData(bytes32,bytes)` calldata that updates the Vault data\nawait universalProfile.connect(myEOA).execute(\n  0, // OPERATION CALL\n  vaultAddress,\n  0, // value to transfer\n  setDataCalldata,\n);\n")))),(0,r.kt)("h3",{id:"final-code-1"},"Final code"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Update Vault\'s URD to the one newly deployed"',title:'"Update',"Vault's":!0,URD:!0,to:!0,the:!0,one:!0,newly:!0,'deployed"':!0},"const updateVaultURD = async (vaultURDAddress) => {\n  // create an instance of the LSP9Vault\n  const vault = new web3.eth.Contract(LSP9Vault.abi, vaultAddress);\n  // create an instance of the Universal Profile\n  const universalProfile = new web3.eth.Contract(\n    UniversalProfile.abi,\n    universalProfileAddress,\n  );\n\n  // encode setData Calldata on the Vault\n  const setDataCalldata = await vault.methods\n    .setData(\n      ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate,\n      vaultURDAddress,\n    )\n    .encodeABI(); // Any other information can be stored here\n\n  // execute the `setDataCalldata` that updates the Vault data\n  await universalProfile.methods\n    .execute(\n      0, // OPERATION CALL\n      vaultAddress,\n      0, // value to transfer\n      setDataCalldata,\n    )\n    .send({\n      from: myEOA.address,\n      gasLimit: 600_000,\n    });\n};\n\n// update the curent Vault's URD\nawait updateVaultURD(vaultURDAddress);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Update Vault\'s URD to the one newly deployed"',title:'"Update',"Vault's":!0,URD:!0,to:!0,the:!0,one:!0,newly:!0,'deployed"':!0},"const updateVaultURD = async (vaultURDAddress) => {\n  // create an instance of the LSP9Vault\n  const vault = new ethers.Contract(vaultAddress, LSP9Vault.abi);\n  // create an instance of the Universal Profile\n  const universalProfile = new ethers.Contract(\n    universalProfileAddress,\n    UniversalProfile.abi,\n  );\n\n  // encode setData Calldata on the Vault\n  const setDataCalldata = vault.interface.encodeFunctionData('setData', [\n    ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate,\n    vaultURDAddress,\n  ]); // Any other information can be stored here\n\n  // execute the `setDataCalldata` that updates the Vault data\n  await universalProfile.connect(myEOA).execute(\n    0, // OPERATION CALL\n    vaultAddress,\n    0, // value to transfer\n    setDataCalldata,\n  );\n};\n\n// update the curent Vault's URD\nawait updateVaultURD(vaultURDAddress);\n")))),(0,r.kt)("h2",{id:"final-code---deploy--update"},"Final code - Deploy & Update"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Deploy new Vault URD and update Vault\'s URD"',title:'"Deploy',new:!0,Vault:!0,URD:!0,and:!0,update:!0,"Vault's":!0,'URD"':!0},"import LSP1UniversalReceiverDelegateVault from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateVault.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.testnet.lukso.network');\nconst vaultAddress = '0x...';\nconst universalProfileAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...';\nconst myEOA = web3.eth.accounts.wallet.add(privateKey);\n\nconst deployVaultURD = async () => {\n  // create an instance of the LSP1UniversalReceiverDelegateVault\n  const vaultURD = new web3.eth.Contract(\n    LSP1UniversalReceiverDelegateVault.abi,\n  );\n  let vaultURDAddress;\n\n  // deploy the Universal Receiver Delegate Vault contract\n  await vaultURD\n    .deploy({\n      data: LSP1UniversalReceiverDelegateVault.bytecode,\n    })\n    .send({\n      from: myEOA.address,\n      gas: 5_000_000,\n      gasPrice: '1000000000',\n    })\n    .on('receipt', (receipt) => (vaultURDAddress = receipt.contractAddress));\n\n  return vaultURDAddress;\n};\n\nconst updateVaultURD = async (vaultURDAddress) => {\n  // create an instance of the LSP9Vault\n  const vault = new web3.eth.Contract(LSP9Vault.abi, vaultAddress);\n  // create an instance of the Universal Profile\n  const universalProfile = new web3.eth.Contract(\n    UniversalProfile.abi,\n    universalProfileAddress,\n  );\n\n  // encode setData Calldata on the Vault\n  const setDataCalldata = await vault.methods\n    .setData(\n      ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate,\n      vaultURDAddress,\n    )\n    .encodeABI(); // Any other information can be stored here\n\n  // execute the `setDataCalldata` that updates the Vault data\n  await universalProfile.methods\n    .execute(\n      0, // OPERATION CALL\n      vaultAddress,\n      0, // value to transfer\n      setDataCalldata,\n    )\n    .send({\n      from: myEOA.address,\n      gasLimit: 600_000,\n    });\n};\n\n// deploy a new Vault URD and retrieve its address\nconst vaultURDAddress = await deployVaultURD();\n// update the curent Vault's URD\nawait updateVaultURD(vaultURDAddress);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Deploy new Vault URD and update Vault\'s URD"',title:'"Deploy',new:!0,Vault:!0,URD:!0,and:!0,update:!0,"Vault's":!0,'URD"':!0},"import LSP1UniversalReceiverDelegateVault from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateVault.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.providers.JsonRpcProvider(\n  'https://rpc.testnet.lukso.network',\n);\nconst vaultAddress = '0x...';\nconst universalProfileAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n\nconst deployVaultURD = async () => {\n  // create a LSP1UniversalReceiverDelegateVault Contract Factory\n  const vaultURDFactory = new ethers.ContractFactory(\n    LSP1UniversalReceiverDelegateVault.abi,\n    LSP1UniversalReceiverDelegateVault.bytecode,\n  );\n\n  // deploy the Universal Receiver Delegate Vault contract\n  const vaultURD = await vaultURDFactory.connect(myEOA).deploy();\n\n  return vaultURD.address;\n};\n\nconst updateVaultURD = async (vaultURDAddress) => {\n  // create an instance of the LSP9Vault\n  const vault = new web3.eth.Contract(LSP9Vault.abi, vaultAddress);\n  // create an instance of the Universal Profile\n  const universalProfile = new web3.eth.Contract(\n    UniversalProfile.abi,\n    universalProfileAddress,\n  );\n\n  // encode setData Calldata on the Vault\n  const setDataCalldata = await vault.methods\n    .setData(\n      ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate,\n      vaultURDAddress,\n    )\n    .encodeABI(); // Any other information can be stored here\n\n  // execute the `setDataCalldata` that updates the Vault data\n  await universalProfile.connect(myEOA).execute(\n    0, // OPERATION CALL\n    vaultAddress,\n    0, // value to transfer\n    setDataCalldata,\n  );\n};\n\n// deploy a new Vault URD and retrieve its address\nconst vaultURDAddress = await deployVaultURD();\n// update the curent Vault's URD\nawait updateVaultURD(vaultURDAddress);\n")))),(0,r.kt)("h2",{id:"reading-data"},"Reading Data"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"LSP9Vault")," contract is an ",(0,r.kt)("strong",{parentName:"p"},"ERC725")," contract, so it shares the same way to read data as Universal Profiles and other ERC725 contracts by using ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/tools/erc725js/getting-started"},"erc725.js")),"."),(0,r.kt)("p",null,"You can refer to this ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/guides/universal-profile/read-profile-data"},"previous guide"))," to learn how to ",(0,r.kt)("strong",{parentName:"p"},"fetch data")," (received assets, issued assets, etc ..). Please note, that you will need to replace the address of the ",(0,r.kt)("strong",{parentName:"p"},"Universal Profile")," with the ",(0,r.kt)("strong",{parentName:"p"},"Vault's")," address."))}v.isMDXComponent=!0}}]);