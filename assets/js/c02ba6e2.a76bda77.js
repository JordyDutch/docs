"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[5454],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(o,".").concat(m)]||u[m]||p[m]||s;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const s="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),r=n(7294),s=n(6010),i=n(2466),l=n(6775),o=n(1980),c=n(7392),d=n(12);function p(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=u(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[o,c]=h({queryString:n,groupId:a}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),v=(()=>{const e=o??p;return m({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{v&&l(v)}),[v]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),f(e)}),[c,f,s]),tabValues:s}}var v=n(2389);const g="tabList__CuJ",b="tabItem_LNqP";function k(e){let{className:t,block:n,selectedValue:l,selectValue:o,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),u=e=>{const t=e.currentTarget,n=d.indexOf(t),a=c[n].value;a!==l&&(p(t),o(a))},m=e=>{var t;let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:u},i,{className:(0,s.Z)("tabs__item",b,null==i?void 0:i.className,{"tabs__item--active":l===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function P(e){const t=f(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",g)},r.createElement(k,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,v.Z)();return r.createElement(P,(0,a.Z)({key:String(t)},e))}},7234:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),s=n(4866),i=n(5162);const l={sidebar_label:"Accept & Reject Assets",sidebar_position:2},o="Accept & Reject Assets",c={unversionedId:"guides/universal-receiver-delegate/accept-reject-assets",id:"guides/universal-receiver-delegate/accept-reject-assets",title:"Accept & Reject Assets",description:"Each user can create its own custom Universal Receiver Delegate contract that holds its own logic to be executed once the universalReceiver(..) function on his profile is called.",source:"@site/docs/guides/universal-receiver-delegate/accept-reject-assets.md",sourceDirName:"guides/universal-receiver-delegate",slug:"/guides/universal-receiver-delegate/accept-reject-assets",permalink:"/guides/universal-receiver-delegate/accept-reject-assets",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/guides/universal-receiver-delegate/accept-reject-assets.md",tags:[],version:"current",lastUpdatedAt:1685438104,formattedLastUpdatedAt:"May 30, 2023",sidebarPosition:2,frontMatter:{sidebar_label:"Accept & Reject Assets",sidebar_position:2},sidebar:"guidesSidebar",previous:{title:"Set the default implementation",permalink:"/guides/universal-receiver-delegate/set-default-implementation"},next:{title:"Create an LSP7 Digital Asset (Token)",permalink:"/guides/digital-assets/create-lsp7-digital-asset"}},d={},p=[{value:"Rejecting all Assets",id:"rejecting-all-assets",level:2},{value:"Deploy contract through Remix",id:"deploy-contract-through-remix",level:3},{value:"Set the address of the URD in the UP&#39;s storage",id:"set-the-address-of-the-urd-in-the-ups-storage",level:3},{value:"Install dependencies",id:"install-dependencies",level:3},{value:"Imports, constants and EOA",id:"imports-constants-and-eoa",level:3},{value:"Create UP contract instance",id:"create-up-contract-instance",level:3},{value:"Setup the LSP1 Universal Receiver Delegate",id:"setup-the-lsp1-universal-receiver-delegate",level:3},{value:"Final code",id:"final-code",level:3},{value:"Accepting specific Assets",id:"accepting-specific-assets",level:2}],u={toc:p};function m(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"accept--reject-assets"},"Accept & Reject Assets"),(0,r.kt)("p",null,"Each user can create its own ",(0,r.kt)("strong",{parentName:"p"},"custom Universal Receiver Delegate")," contract that holds its own logic to be executed once the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/standards/smart-contracts/lsp0-erc725-account#universalreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"universalReceiver(..)")))," function on his profile is called."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"LSP1UniversalReceiverDelegate-Guide",src:n(9427).Z,width:"2612",height:"1531"})),(0,r.kt)("h2",{id:"rejecting-all-assets"},"Rejecting all Assets"),(0,r.kt)("p",null,"In order to ",(0,r.kt)("strong",{parentName:"p"},"reject all the assets")," that are being transferred to the profile, we need to create a Universal Receiver Delegate contract that reverts when it's the case of asset transfer (LSP7 & LSP8). The ",(0,r.kt)("a",{parentName:"p",href:"/standards/smart-contracts/lsp0-erc725-account#universalreceiver"},(0,r.kt)("inlineCode",{parentName:"a"},"typeId"))," is the parameter that will give us more context on the call being made."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"e.g.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"typeId")," is ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/lukso-network/lsp-smart-contracts/blob/v0.8.0/contracts/LSP7DigitalAsset/LSP7Constants.sol#L13"},(0,r.kt)("inlineCode",{parentName:"a"},"0x429ac7a06903dbc9c13dfcb3c9d11df8194581fa047c96d7a4171fc7402958ea")," ","_","TYPEID_LSP7_TOKENSRECIPIENT")),", then we know that we are receiving a LSP7 Token.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"typeId")," is ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/lukso-network/lsp-smart-contracts/blob/v0.8.0/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol#L21"},(0,r.kt)("inlineCode",{parentName:"a"},"0x20804611b3e2ea21c480dc465142210acf4a2485947541770ec1fb87dee4a55c")," ","_","TYPEID_LSP8_TOKENSRECIPIENT")),", then we know that we are receiving a LSP8 Token."))),(0,r.kt)("h3",{id:"deploy-contract-through-remix"},"Deploy contract through Remix"),(0,r.kt)("p",null,"The first step is to navigate to ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://remix.ethereum.org/"},"Remix's website"))," and create a new solidity file under the ",(0,r.kt)("strong",{parentName:"p"},"contracts")," folder."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Creating Universal Receiver Delegate in Remix",src:n(7252).Z,width:"2998",height:"1334"})),(0,r.kt)("p",null,"After creating the ",(0,r.kt)("strong",{parentName:"p"},"UniversalReceiverDelegate.sol")," file, copy the code snippet below inside the file created. This code snippet will be responsible for rejecting all LSP7 & LSP8 assets being transferred to your profile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="UniversalReceiverDelegate.sol - Solidity Code snippet of the URD that reject all assets"',title:'"UniversalReceiverDelegate.sol',"-":!0,Solidity:!0,Code:!0,snippet:!0,of:!0,the:!0,URD:!0,that:!0,reject:!0,all:!0,'assets"':!0},'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n// This code is only used for guides puprose, it is working but not verified nor audited.\n\n// modules\nimport {LSP1UniversalReceiverDelegateUP} from "@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1UniversalReceiverDelegateUP/LSP1UniversalReceiverDelegateUP.sol";\n\n// constants\nimport {_TYPEID_LSP7_TOKENSRECIPIENT} from "@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7Constants.sol";\nimport {_TYPEID_LSP8_TOKENSRECIPIENT} from "@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol";\n\ncontract CustomUniversalReceiverDelegate is LSP1UniversalReceiverDelegateUP  {\n\n    /**\n    * @param asset The address of the asset being transferred to the UniversalProfile.\n    * @param asset The address disallowing receiving assets.\n    */\n    error ReceivingAssetsNotAllowed(address asset, address recipient);\n\n    /**\n    * @dev Reverts when the typeId is relative to token receiving (LSP7 & LSP8)\n    * @param caller The address of the asset informing the `universalReceiver(..)` function on the UniversalProfile.\n    * @param value The amount of native tokens sent by the caller to the universalReceiver function on the UniversalProfile.\n    * @param typeId The typeId representing the context of the call to the universalReceiver function on the UniversalProfile.\n    * @param typeId The data sent to the universalReceiver function on the UniversalProfile.\n    */\n    function universalReceiverDelegate(\n        address caller,\n        uint256 value,\n        bytes32 typeId,\n        bytes memory data\n    ) public override returns (bytes memory result) {\n        if (typeId == _TYPEID_LSP7_TOKENSRECIPIENT || typeId == _TYPEID_LSP8_TOKENSRECIPIENT){\n            revert ReceivingAssetsNotAllowed(caller, msg.sender);\n        }\n    }\n}\n\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Please make sure to unlock MetaMask and disable Browser Extension while doing this step.\n",(0,r.kt)("img",{alt:"Turning off Browser extension to use Remix Injected Provider",src:n(7482).Z,width:"3546",height:"1127"}))),(0,r.kt)("p",null,"After copying the code, navigate to the ",(0,r.kt)("strong",{parentName:"p"},"Solidity Compiler")," tab and press the Compile UniversalReceiverDelegate.sol button. Then navigate to the ",(0,r.kt)("strong",{parentName:"p"},"Deploy & Run Transactions")," tab and choose ",(0,r.kt)("em",{parentName:"p"},"Injected Provider")," as the environment."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Compiling contract in Remix",src:n(6046).Z,width:"2592",height:"1542"})),(0,r.kt)("p",null,"You should be connected to LUKSO Testnet in MetaMask and Remix and have enough LYXt in the EOA used to deploy the URD."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Connect to LUKSO Testnet in Remix",src:n(3472).Z,width:"2392",height:"1472"})),(0,r.kt)("p",null,"After choosing the ",(0,r.kt)("strong",{parentName:"p"},"CustomUniversalReceiverDelegate")," contract in the ",(0,r.kt)("em",{parentName:"p"},"CONTRACT")," section and deploying, you'll confirm the transaction and wait until the transaction is confirmed and the contract is deployed on the network. Once deployed, you can copy the contract address to be used later when setting the address inside the storage."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Deploy and Copy the address in Remix",src:n(4293).Z,width:"2535",height:"1577"})),(0,r.kt)("h3",{id:"set-the-address-of-the-urd-in-the-ups-storage"},"Set the address of the URD in the UP's storage"),(0,r.kt)("p",null,"After deploying the contract, we need to set its address under the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/standards/generic-standards/lsp1-universal-receiver#extension"},"LSP1-UniversalReceiverDelegate Data Key"))," inside the UP's storage."),(0,r.kt)("h3",{id:"install-dependencies"},"Install dependencies"),(0,r.kt)("p",null,"Make sure you have the following dependencies installed before beginning this tutorial:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Either ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,r.kt)("inlineCode",{parentName:"a"},"web3.js"))," or ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,r.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")))),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install web3 @lukso/lsp-smart-contracts\n"))),(0,r.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Install the dependencies"',title:'"Install',the:!0,'dependencies"':!0},"npm install ethers @lukso/lsp-smart-contracts\n")))),(0,r.kt)("h3",{id:"imports-constants-and-eoa"},"Imports, constants and EOA"),(0,r.kt)("p",null,"First, we need to get the ",(0,r.kt)("em",{parentName:"p"},"ABI")," for the Universal Profile contract.\nAfter that we need to store the address of our Universal Profile and the new URD address.",(0,r.kt)("br",{parentName:"p"}),"\n","Then we will initialize the controller address."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports, Constants & EOA"',title:'"Imports,',Constants:!0,"&":!0,'EOA"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\n// constants\nconst web3 = new Web3('https://rpc.testnet.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\nconst universalProfileURDAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...';\nconst EOA = web3.eth.accounts.wallet.add(privateKey);\n"))),(0,r.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Imports, Constants & EOA"',title:'"Imports,',Constants:!0,"&":!0,'EOA"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\n// constants\nconst provider = new ethers.providers.JsonRpcProvider(\n  'https://rpc.testnet.lukso.network',\n);\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\nconst universalProfileURDAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst EOA = new ethers.Wallet(privateKey).connect(provider);\n")))),(0,r.kt)("h3",{id:"create-up-contract-instance"},"Create UP contract instance"),(0,r.kt)("p",null,"At this point we need to create an instance of the ",(0,r.kt)("a",{parentName:"p",href:"/standards/universal-profile/lsp0-erc725account"},(0,r.kt)("strong",{parentName:"a"},"Universal Profile"))," contract:"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contract instance for the Universal Profile"',title:'"Contract',instance:!0,for:!0,the:!0,Universal:!0,'Profile"':!0},"// create an instance of the Universal Profile\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n"))),(0,r.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Contract instance for the Universal Profile"',title:'"Contract',instance:!0,for:!0,the:!0,Universal:!0,'Profile"':!0},"// create an instance of the Universal Profile\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n")))),(0,r.kt)("h3",{id:"setup-the-lsp1-universal-receiver-delegate"},"Setup the LSP1 Universal Receiver Delegate"),(0,r.kt)("p",null,"Finally, we need to send the transaction that will update the URD of the Universal Profile."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Update the Universal Profile data"',title:'"Update',the:!0,Universal:!0,Profile:!0,'data"':!0},"// Update the profile data\nawait universalProfile.methods.setData(\n  URD_DATA_KEY,\n  universalProfileURDAddress,\n).send({\n  from: EOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,r.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Update the Universal Profile data"',title:'"Update',the:!0,Universal:!0,Profile:!0,'data"':!0},"// Update the profile data\nawait universalProfile\n  .connect(EOA)\n  .setData(URD_DATA_KEY, universalProfileURDAddress);\n")))),(0,r.kt)("h3",{id:"final-code"},"Final code"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Update the Universal Profile URD"',title:'"Update',the:!0,Universal:!0,Profile:!0,'URD"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\n// constants\nconst web3 = new Web3('https://rpc.testnet.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\nconst universalProfileURDAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...';\nconst EOA = web3.eth.accounts.wallet.add(privateKey);\n\n// create an instance of the Universal Profile\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n\n// execute the executeCalldata on the Key Manager\nawait universalProfile.methods.setData(\n  URD_DATA_KEY,\n  universalProfileURDAddress,\n).send({\n  from: EOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,r.kt)(i.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Update the Universal Profile URD"',title:'"Update',the:!0,Universal:!0,Profile:!0,'URD"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\n// constants\nconst provider = new ethers.providers.JsonRpcProvider(\n  'https://rpc.testnet.lukso.network',\n);\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\nconst universalProfileURDAddress = '0x...';\n\n// setup your EOA\nconst privateKey = '0x...'; // your EOA private key (controller address)\nconst EOA = new ethers.Wallet(privateKey).connect(provider);\n\n// create an instance of the Universal Profile\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n\n// execute the executeCalldata on the Key Manager\nawait universalProfile\n  .connect(EOA)\n  .setData(URD_DATA_KEY, universalProfileURDAddress);\n")))),(0,r.kt)("h2",{id:"accepting-specific-assets"},"Accepting specific Assets"),(0,r.kt)("p",null,"To accept specific assets, you should differentiate between the different assets being transferred to you. One way to do it is to have a mapping inside the URD contract that states if the asset being transferred ",(0,r.kt)("strong",{parentName:"p"},"is allowed to be received or not"),". Only the owner should be allowed to add these asset addresses. For simplicity, the owner could be the EOA address deploying the contract."),(0,r.kt)("p",null,"Repeat the deployment steps in ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#rejecting-all-assets"},"Rejecting all Assets"))," section and replace the solidity code with the one written below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="Solidity Code snippet of the Custom URD that accept specific assets"',title:'"Solidity',Code:!0,snippet:!0,of:!0,the:!0,Custom:!0,URD:!0,that:!0,accept:!0,specific:!0,'assets"':!0},'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n// This code is only used for guides puprose, it is working but not verified nor audited.\n\n// modules\nimport {LSP1UniversalReceiverDelegateUP} from "@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1UniversalReceiverDelegateUP/LSP1UniversalReceiverDelegateUP.sol";\n\n// constants\nimport {_TYPEID_LSP7_TOKENSRECIPIENT} from "@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7Constants.sol";\nimport {_TYPEID_LSP8_TOKENSRECIPIENT} from "@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol";\n\ncontract CustomUniversalReceiverDelegate is LSP1UniversalReceiverDelegateUP  {\n\n    address immutable public owner;\n    mapping (address => bool) public allowedAssets;\n\n    constructor(address _owner){\n        owner = _owner;\n    }\n\n    modifier onlyOwner(){\n        require(msg.sender == owner, "CustomUniversalReceiverDelegate : Caller is not the owner");\n        _;\n    }\n\n\n    function setAllowedAssets(address assets) public onlyOwner {\n        allowedAssets[assets] = true;\n    }\n    /**\n    * @dev Reverts when the asset being transferred is not allowed. If allowed, the address of the asset\n    * will be registered inside the storage, and removed when balance of the asset equal 0, according to\n    * the LSP5-ReceivedAssers standard.\n    *\n    * @param caller The address of the asset informing the `universalReceiver(..)` function on the UniversalProfile.\n    * @param value The amount of native tokens sent by the caller to the universalReceiver function on the UniversalProfile.\n    * @param typeId The typeId representing the context of the call to the universalReceiver function on the UniversalProfile.\n    * @param typeId The data sent to the universalReceiver function on the UniversalProfile.\n    */\n    function universalReceiverDelegate(\n        address caller,\n        uint256 value,\n        bytes32 typeId,\n        bytes memory data\n    ) public override returns (bytes memory result){\n        // checking if the asset being transferred is allowed or not.\n        if(typeId == _TYPEID_LSP8_TOKENSRECIPIENT || typeId == _TYPEID_LSP7_TOKENSRECIPIENT){\n            require(allowedAssets[caller], "Asset being transferred is not allowed to be received");\n        }\n        // using the default implementation code to register the address of assets received\n        result = super.universalReceiverDelegate(caller, value, typeId, data);\n    }\n}\n')),(0,r.kt)("p",null,"The code above will register the address of the assets allowed and remove them when the UP's balance for this asset is equal to 0. It will also reject assets that are not allowed. Since this code will need ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/standards/universal-profile/lsp6-key-manager#super-permissions"},"SUPER_SETDATA Permission")),", after deploying you will set the address of the URD in the storage using the code from the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/guides/universal-receiver-delegate/set-default-implementation#set-the-address-of-the-urd-in-the-storage"},"Set the address of the URD in the storage"))," section."))}m.isMDXComponent=!0},9427:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/UniversalReceiverDelegate-Guide-f5859ba1a65be506a1333711bb641b64.jpeg"},6046:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/remix-compiling-contract-69306a722de7dc3402212a1d312c7200.jpeg"},3472:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/remix-connect-testnet-3735dc831d71911f1f9896ca1ac50bdf.jpg"},7252:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/remix-creating-file-623cd12b4561f01cd7a3ef09ba1acbd2.jpeg"},4293:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/remix-deploy-copy-address-ae34db3793706f0fb1371adea92ec97b.jpeg"},7482:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/turn-off-browser-extension-e670c855042852daeee4d33320b4e008.jpeg"}}]);